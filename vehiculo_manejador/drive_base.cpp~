 #include <iostream>
 #include <ros/ros.h>
 #include <geometry_msgs/Twist.h>
 
 class AutoDriver
 {
 private:
   //! El manejador de nodo_que usaremos
   ros::NodeHandle nh_;
   //! Vamos a Publicar en el topic "cmd_vel" para mandar comandos 
   ros::Publisher cmd_vel_pub_;
 
 public:
   //! Inicializacion del nodo de ROS
   AutoDriver(ros::NodeHandle &nh)
   {
     nh_ = nh;
     //Configuracion de nuestro publicador, nivel sencillo
     cmd_vel_pub_ = nh_.advertise<geometry_msgs::Twist>("/auto_controller/command", 1);
   }
 
   //! Loop forever while sending drive commands based on keyboard input
   bool driveKeyboard()
   {
    std::cout << "Presione de un comando y presione enter.  "
      "Usar '+' para aumentar velocidad, '-' para disminuir velocidad, 'i' para moverse a la izquierda, "
      "'d' para girar a la derecha, 'a' carro en modo automatico, '.' para salir.\n";

    //Y enviamos el mensaje del "twist"
    geometry_msgs::Twist base_cmd;

    char cmd[50];
    while(nh_.ok()){

      std::cin.getline(cmd, 50);
      if(cmd[0]!='+' && cmd[0]!='l' && cmd[0]!='-' && cmd[0]!='r' && cmd[0]!='s' && cmd[0]!='.')
      {
        std::cout << "Que xopa contigo, ese comando es desconocido:" << cmd << "\n";
        continue;
      }

      base_cmd.linear.x = base_cmd.linear.y = base_cmd.angular.z = 0;   
      //aumenta la velocidad
      if(cmd[0]=='+'){
        base_cmd.linear.x = 50;
	base_cmd.angular.z = 0;
      }
      //disminuye velocidad
      else if(cmd[0]=='-'){
        base_cmd.linear.x = -50;
	base_cmd.angular.z = 0;
      }
      //sterring derecha
      else if(cmd[0]=='d'){
        base_cmd.angular.z = 1;
        base_cmd.linear.x = 0;
      } 
      //steering izquierda
      else if(cmd[0]=='i'){
        base_cmd.angular.z = -1;
        base_cmd.linear.x = 0;
      } 
      //stop
      else if(cmd[0]=='a'){
        base_cmd.angular.z = 10;
        base_cmd.linear.x = 10;
      }
      //quit
      else if(cmd[0]=='.'){
        break;
      }
      
      //publish the assembled command
      cmd_vel_pub_.publish(base_cmd);
    }
    return true;
  }

 };

 int main(int argc, char** argv)
 {
   //inicializa ros
   ros::init(argc, argv, "auto_driver"); 
   ros::NodeHandle nh; 
 
   AutoDriver driver(nh);
   driver.driveKeyboard();
 }
